version: '3.9'

services:
  frontend:
    build:
      context: . # ビルドコンテキストの指定 -> Dockerfileが参照できるファイルやディレクトリの範囲を指定 （./frontendだけでなく、./sharedも参照できるようにするためにルートを指定）
      dockerfile: ./frontend/Dockerfile # 使用するDockerfileの名前を指定
    container_name: simple-budget-frontend # コンテナ名を明示的に指定（docker ps で識別しやすくなる）
    ports:
      - "${FRONTEND_PORT}:3000" # ホストの環境変数ポート:コンテナ内部ポート（Next.jsのデフォルトは3000）
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    volumes:
      - ./frontend:/app/frontend # ホストの ./frontend ディレクトリをコンテナの /app にマウント -> ホットリロード対応
      - ./shared:/app/shared # 共有コードをマウント
      - /app/frontend/node_modules # 匿名ボリューム -> ./backend:/app でホスト全体をマウントしても、node_modules だけは上書きされないようにする
      - /app/shared/node_modules # 共有コードの node_modules も同様に上書きされないようにする
      - /app/frontend/.next # 匿名ボリューム -> ビルド成果物をホストから隔離
    depends_on:
      - backend # バックエンドコンテナが起動してから、フロントエンドを起動
    networks:
      - simple-budget-network # すべてのコンテナが同じネットワークに所属 -> コンテナ名（backend, mysql等）でDNS解決が可能
    restart: unless-stopped # コンテナが予期せず停止した場合、自動的に再起動（手動停止の場合は再起動しない）

  backend:
    build:
      context: ./ # ビルドコンテキストの指定 -> Dockerfileが参照できるファイルやディレクトリの範囲を指定 （./backendだけでなく、./sharedも参照できるようにするためにルートを指定）
      dockerfile: ./backend/Dockerfile
      target: development # Dockerfile内のターゲットステージを指定 -> 開発用イメージをビルド
    container_name: simple-budget-backend
    ports:
      - "${BACKEND_PORT}:8080"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SESSION_SECRET=${JWT_SESSION_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - PORT=8080
    volumes:
      - ./backend:/app/backend
      - ./shared:/app/shared
      - /app/backend/node_modules
      - /app/shared/node_modules
      - /app/backend/dist
    depends_on:
      mysql:
        condition: service_healthy # MySQLコンテナのヘルスチェックが成功するまで待機 -> Prismaマイグレーション実行時にDB接続エラーを防ぐ
    networks:
      - simple-budget-network
    restart: unless-stopped

  mysql:
    image: mysql:8.0.42
    platform: linux/arm64 # M1/M2 Mac用のプラットフォーム指定（Intel Macの場合は削除可）
    container_name: simple-budget-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql # MySQLのデータファイルを名前付きボリュームに永続化 -> コンテナを削除してもデータが消えない ※データは /var/lib/mysql に保存される（MySQL公式の標準パス）
    networks:
      - simple-budget-network
    restart: unless-stopped
    healthcheck: # MySQLが正常に起動しているかを定期的にチェック
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s

networks:
  simple-budget-network:
    driver: bridge # Dockerのデフォルトネットワークドライバー（同一ホスト内のコンテナ間通信）

volumes:
  mysql_data: # MySQLのデータを永続化するボリューム -> docker compose down してもデータが消えない
    driver: local # ローカルディスクにデータを保存
